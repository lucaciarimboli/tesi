// Poloidal plane domain parameters:
real R0 = 5/3;         // major radius
real a = 0.5;          // minor radius
real lambda = -0.3;      // triangularity
real eps = a / R0; // aspect ratio
real b = 1. - eps;  // elongation

// Generate D-shaped Mesh:
int n = 64; // number of points in the boundary
border Gamma1(t=-1,1){  
    x = t;  
    y = b/a * sqrt((1 - (t - eps/2 * (1 - t^2))^2) / ((1 - eps^2 / 4) * (1 + eps*t)^2 + lambda * t * (1 + eps/2 * t)));  
}  
border Gamma2(t=1,-1){  
    x = t;  
    y = -b/a * sqrt((1 - (t - eps/2 * (1 - t^2))^2) / ((1 - eps^2 / 4) * (1 + eps*t)^2 + lambda * t * (1 + eps/2 * t)));  
}  
mesh Th = buildmesh(Gamma1(-n/2) + Gamma2(-n/2)); // D-shaped domain
plot(Th, wait=true, ps="mesh.eps");

// Finite Element Space:
fespace Vh(Th, P1);                              // P1 elements space
Vh psi, psi0, phi, error, G1, G2, deltapsi;     // flux, initial guess, test function, error, G1, G2, incremental flux

// Define pressure and current dependence on the flux function:
real alpha = ( 4*(a^2+b^2)*eps + a^2 * (2*lambda - eps^3) ) / ( 2*R0 * eps * a^2 * b^2);
real beta = - lambda / (eps * b^2); // beta = FF'

// Numerical FEM solution:
real L2error;     // Error in L2 norm
func g = 0.;      // Homogeneous Dirichlet BC

// Variational formulation (x=R, y=z):
problem GradShafranov(psi, phi, solver=LU) =
      int2d(Th)((dx(psi)*dx(phi) + dy(psi)*dy(phi) + 1/x*dx(psi)*phi))
    - int2d(Th)( (x^2 * G1 + G2) * phi)
    + on(Gamma1,Gamma2, psi = g)
    ;

// Problem for the initial guess with G=0:
problem InitialGuess(psi0, phi, solver=LU) =
      int2d(Th)((dx(psi0)*dx(phi) + dy(psi0)*dy(phi) + 1/x*dx(psi0)*phi))
    + on(Gamma1,Gamma2, psi0 = g)
    ;

// Macro implementing the Picard iterative method to solve the Grad-Shafranov problem.
real tol = 1e-6;
int kmax = 100;
macro Picard() {
    InitialGuess;
    cout << "Starting loop..." << endl;
    for(int k = 0; k < kmax; k++) {
        cout << "Iteration k = " << k << endl;

        // Update nonlinear function G:
        G1 = sin(psi0);
        G2 = cos(psi0);

        // Solve problem:
        GradShafranov;

        // Compute error:
        deltapsi[] = psi[] - psi0[];
        real err = sqrt(int2d(Th)(deltapsi'*deltapsi))/sqrt(int2d(Th)(psi'*psi));

        if( err < tol ){
    	    cout << "Value of the error after " << k+1 << " iterations: " << err << endl;
    	    break;
	    }

        if( k == kmax - 1 )
            cout << "WARNING: Picard method does not converge in " << kmax << " iterations!" << endl;

        psi0[] = psi[];
    }
} //

// Solve with Picard iterative method:
Picard;
plot(psi, wait=true, fill=true, ps="flux.eps");

// Compute error:
//error = abs(psi - psiExact);
//L2error = sqrt(int2d(Th)(square(error)))/sqrt(int2d(Th)(square(psiExact)));
//cout << "L2 error: " << L2error << endl;